;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))
;;; This file is part of the files that accompany the book:
;;;     LISP Implantation Semantique Programmation (InterEditions, France)
;;; By Christian Queinnec <Christian.Queinnec@INRIA.fr>
;;; Newest version may be retrieved from:
;;;   (IP 128.93.2.54) ftp.inria.fr:INRIA/Projects/icsla/Books/LiSP*.tar.gz
;;; Check the README file before using this file.
;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))

;;; The test-driver should try to catch errors of the underlying Scheme 
;;; system. This is non-portable and difficult in many implementations. If
;;; do not succeed writing it, you can still run the programs of the book
;;; but you will not be able to run all the test-suites since some tests 
;;; (for instance in meroonet/oo-tests.scm) require errors to be caught
;;; when signalled by list-tail with a non-numeric second argument.

;(set! error-handler
;      (lambda error-msg
;        (error-print error-msg) ) )

;;; This function will test a suite of tests.

(define (test file)
  (suite-test
   file "?? " "== " #t
   (lambda (read check err)
     (define (the-error . args)
       (apply err args) )
     (set! meroonet-error the-error)
     (set! tester-error    the-error)
     (lambda ()
       (bind-condition-handler () the-error
           (lambda ()
             (let ((e (read)))
               (check (eval e user-initial-environment)) ) ) ) ) )
   equal? ) )
;;; Test: 
;;;	(test "meroonet/oo-tests.scm")
;;;	(test "src/syntax.tst")

;;; A small toplevel loop.
(define (start)
  (display "[C. Queinnec's book] Mit-Scheme+Meroonet+syntax-case...")
  (newline)
  (set! *syntax-case-load-verbose?* #t)
  (set! load syntax-case-load)
  (interpreter
   "? " "= " #t
   (lambda (read print err)
     (set! tester-error   err)
     (set! meroonet-error err)
     (lambda ()
       (bind-condition-handler () err
         (lambda ()
           (let ((e (read)))
             (print (eval e user-initial-environment)) ) ) ) ) ) )
  (display " Ite LiSP est.")
  (newline)
  (exit 0) )

;;; Warp into the new toplevel.
(start)
