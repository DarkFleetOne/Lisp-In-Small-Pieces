;;; $Id: rtbook.bgl,v 1.9 1998/05/01 09:38:24 queinnec Exp queinnec $

;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))
;;; This file is part of the files that accompany the book:
;;;     LISP Implantation Semantique Programmation (InterEditions, France)
;;; By Christian Queinnec <Christian.Queinnec@INRIA.fr>
;;; Newest version may be retrieved from:
;;;   (IP 128.93.2.54) ftp.inria.fr:INRIA/Projects/icsla/Books/LiSP*.tar.gz
;;; Check the README file before using this file.
;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))

;;; This file defines some functions that should be included in programs
;;; compiled with the interpreter of the book.

(module rtbook
        (eval (export-all))
        ;; Time utility
        (foreign (int time (string) "time"))
        ;; Meroonet (preceded by a small hack that also defines the
        ;; define-abbreviation macro)
        (include "bigloo/hack.bgl")
        (include "meroonet/meroonet.scm")
        ;; Additional utilities
        (include "src/tester.scm")
        (include "common/pp.scm")
        (include "common/format.scm")
        (include "common/definitions.scm")
        (include "common/generics.scm")
        (include "common/toplevel.scm")
        ;; Exported from this file
        (export meroonet-error
                tester-error
                (test file)
                the-Point
                display-exception
                wrong
                static-wrong
                (list* . args)
                (get-internal-run-time)
                internal-time-units-per-second
                (atom? x)
                (iota start end)
                putprop
                (start) )
        ;; From format.scm and pp.scm, do not export pp that already exists in
        ;; Bigloo.
        (export (format destination control-string . args))
        ;; Exported from tester.scm
        (export (interpreter a b c d)
                (suite-test a b c d e f) )
        ;; Exported from Meroonet
        (export (number->class n)
                (->Class name)
                (->Generic name)
                *last-defined-class*
                (object->class o)
                (Object? o)
                (symbol-concatenate . names)
                Object-class
                Class-class
                Generic-class
                Field-class
                Mono-Field-class
                Poly-Field-class
                (make-predicate class)
                (is-a? o class)
                (check-class-membership o class)
                (make-allocator class)
                (make-maker class)
                (retrieve-named-field class name)
                (make-reader field)
                (field-value o field . i)
                (make-writer field)
                (set-field-value! o v field . i)
                (make-lengther field)
                (field-length o field)
                (register-class name super-name own-field-descriptions)
                (Class-initialize! class name super own-field-descriptions)
                (Field-defining-class field)
                Class? 
                Generic?
                Field?
                Mono-Field?
                Poly-Field?
                Class-name
                set-Class-name!
                Class-number
                set-Class-number!
                Class-fields
                set-Class-fields!
                Class-superclass
                set-Class-superclass!
                Class-subclass-numbers
                set-Class-subclass-numbers!
                make-Class 
                allocate-Class
                make-Generic
                allocate-Generic
                Generic-name
                set-Generic-name!
                Generic-default
                set-Generic-default!
                Generic-dispatch-table
                set-Generic-dispatch-table!
                Generic-signature
                set-Generic-signature!
                Field-name
                set-Field-name!
                Field-defining-class-number
                set-Field-defining-class-number!
                make-Mono-Field
                allocate-Mono-Field
                make-Poly-Field
                allocate-Poly-Field
                (register-generic generic-name default signature)
                (register-method generic-name pre-method class-name signature)
                (determine-method generic o) )
        )

;(display "[rtbook.bgl...")(newline) ; DEBUG

;;; Include an eval so exported global variables can also appear as symbols.
(eval ''hack) 

;;; This variable is used in chap8k.scm to determine the underlying Scheme
;;; interpreter.

(define book-interpreter-support 'bigloo)

(define book-interpreter-name "Bigloo")

(define (get-internal-run-time)
  (let ((t (make-string 4)))
    (time t) ) )

(define internal-time-units-per-second 1)

(define putprop putprop!)

(define flush-buffer flush-output-port)

;;; Needed by src/tester.scm
(define display-exception display)

(define (make-toplevel read print-or-check err)
  (set! tester-error   err)
  (set! meroonet-error err)
  (lambda ()
    (try (print-or-check (eval (read)))
         (lambda (k a b c) (err a b c)) ) ) )

;(display " ...")(newline) ; DEBUG
;(display "]")(newline) ; DEBUG

;;; end of rtbook.bgl
